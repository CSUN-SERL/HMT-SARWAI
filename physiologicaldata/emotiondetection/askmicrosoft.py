# Systems Engineering Research Laboratory

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import cv2
import requests
import time

# Emotion API server location
_url = 'https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize?%s'

# Timeout Max
_maxNumRetries = 100


def process_request(json, data, headers, params):
    """
    Helper function to format the request to Emotion API server

    Catches any errors that might occur, such as time-out request, lost connection.

    Implementation due to Project Oxford's code:
    https://github.com/Microsoft/Cognitive-Emotion-Python/blob/master/Jupyter%20Notebook/Emotion%20Analysis%20Example.ipynb

    Parameters:
        json: Used when processing images from its URL. See API Documentation.
        data: Used when processing image read from disk. See API Documentation.
        headers: Used to pass the key information and the data type request.
        params: Any parameters that will be useful for manipulation.

    Returns:
        result: Dictionary that is received from the Emotion API server.
    """

    retries = 0
    result = {}
    while True:

        response = requests.request('post', _url, json=json, data=data, headers=headers, params=params)

        if response.status_code == 429:

            print("Message: %s" % (response.json()['error']['message']))

            if retries <= _maxNumRetries:
                time.sleep(1)
                retries += 1
                continue
            else:
                print('Error: failed after retrying!')
                break

        elif response.status_code == 200 or response.status_code == 201:

            if 'content-length' in response.headers and int(response.headers['content-length']) == 0:
                result = None
            elif 'content-type' in response.headers and isinstance(response.headers['content-type'], str):
                if 'application/json' in response.headers['content-type'].lower():
                    result = response.json() if response.content else None
                elif 'image' in response.headers['content-type'].lower():
                    result = response.content
        else:
            print("Error code: %d" % response.status_code)
            print("Message: %s" % (response.json()['error']['message']))

        break

    return result


def ask_microsoft(frame, key='9984e8855e1d4c2cae3b3e3e2b861203'):
    """
    This function formats the frame to be sent off to Emotion API servers.

    Args:
        frame (numpy.ndarray) : used as the image sent to Emotion API servers.
        key: User key that is given by Microsoft, which allows a limited amount of face evaluation requests.

    Returns:
        emotion_list: List of all emotion data generated by Microsoft, in this order:
                      sadness, neutral, contempt, disgust, anger, surprise, fear, happiness.
    """
    headers = dict()
    headers['Ocp-Apim-Subscription-Key'] = key
    headers['Content-Type'] = 'application/octet-stream'

    # converts frame to a linear string to forward to Emotion API server.
    data_array = cv2.imencode('.jpg', cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))[1].tostring()
    json = None
    params = None
    result = process_request(json, data_array, headers, params)
    emotion_list = [result[0]['scores']['sadness'],
                    result[0]['scores']['neutral'],
                    result[0]['scores']['contempt'],
                    result[0]['scores']['disgust'],
                    result[0]['scores']['anger'],
                    result[0]['scores']['surprise'],
                    result[0]['scores']['fear'],
                    result[0]['scores']['happiness']]

    return emotion_list


# code to retrieve emotion results from video
'''
video_capture = cv2.VideoCapture(0)
while True:
    ret, frame = video_capture.read()
    if cv2.waitKey(1) & 0xFF == ord('w'):
        table = ask_microsoft(frame)
        print(table)
    cv2.imshow("Video", frame)
    # print (type (frame))
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
'''
